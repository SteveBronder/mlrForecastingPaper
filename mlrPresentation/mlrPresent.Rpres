Forecasting in the MLR Framework
========================================================
author: Steve Bronder
date: October 11th, 2016
autosize: true

What is Forecasting?
========================================================

- Predictions of future based on past trends
- What happens Vs. What happens tomorrow
- Stocks, earthquakes, neuroscience

Goal: Make Forecasting Simple
========================================================

> "We need to stop teaching abstinence and start teaching safe statistics"
- Hadley Wickham

Ex: Demeaning the whole data set before CV

- Problem: Forecasting can be dangerous
- Insight: Need a framework for 'safe forecasting'
- Solution: Use ML Framework in forecasting

The Modeling Process
========================================================

<img src="flownames.jpeg" alt="Drawing" style="width: 90%; height: 90%"/>

***

- MLR automates this pipeline
- Make forecasting safer by using the pipeline

Example Data
======================================================

```{r quandl, cache = TRUE, fig.align='center'}
library(Quandl)
library(xts)
aapl <- Quandl("YAHOO/AAPL", api_key="UG7wmFCm6zMyq1xhW9Re")
aaplXts <- xts(aapl$Close, order.by = as.POSIXlt(aapl$Date))
colnames(aaplXts) <- "Close"
aaplXtsTrain <- aaplXts[1:9000,]
aaplXtsTest  <- aaplXts[9001:9035,]
```

Plot of aapl Stock
=====================================================

```{r quandlPlotTrain, cache = TRUE, eval = TRUE, echo = FALSE}
plot(aaplXtsTrain, main = "Training: Closing Price of Apple by Day")

```


***


```{r quandlPlotTest, cache = TRUE, eval = TRUE, echo = FALSE}
plot(aaplXtsTest, main = "Testing: Closing Price of Apple by Day")
```

Creating a Forecasting Task
========================================================

- Task: Keeps data and meta-data for ML task

```{r aaplTask, cache = TRUE}

library(mlr)
aaplTask <- makeForecastRegrTask(
  id = "Forecast aapl Closing Price",
  data = aaplXtsTrain,
  target  = "Close",
  frequency = 5L)

```

Creating a Forecasting Task: Info
========================================================
```{r aaplTaskView, cache = TRUE}
aaplTask
```


Making a Forecasting Learner
======================================================

```{r arimaLearner, cache = TRUE}
garch.mod =makeLearner("fcregr.garch", 
                      model = "sGARCH",
                      garchOrder = c(5,5),
                      distribution.model = "sged",
                      armaOrder = c(6,6),
                      n.ahead = 35,
                      predict.type = "quantile")

```

Making a Forecasting Learner
======================================================

```{r arimaLearnerView, cache = TRUE}
garch.mod 
```

Train a Forecast Learner
======================================================

```{r trainArima, cache = TRUE,eval = TRUE}
garch.train <- train(garch.mod, aaplTask)
garch.train
```

Predict With a Forecast Learner
======================================================
```{r predictArima2, cache = TRUE}
predAapl <- predict(garch.train, newdata = as.data.frame(aaplXtsTest))
performance(predAapl, measures = mase, task = aaplTask)

```

Prediction Plot
=====================================================

```{r predplotArima, cache = TRUE, echo = FALSE, fig.align='center',fig.height= 8, fig.width= 10}
matplot(predAapl$data, type = "l", main = "Prediction Vs. Real Values of Next 35 Days")
```

```{r updateModelArima, cache = TRUE, echo = FALSE, eval = FALSE}
tbatsUpdate  = updateModel(train.tbats, aaplTask, newdata = aaplXtsTest)
updatePred = predict(tbatsUpdate, task = aaplTask)
updatePred
```

Tuning a Model
=====================================================

```{r makeTuneParam, cache = TRUE}
# Make a tuning grid for GARCH
par_set = makeParamSet(
  makeDiscreteParam(id = "model",
                    values = c("sGARCH", "csGARCH", "fGARCH")),
  makeDiscreteParam("submodel", values = c("GARCH","TGARCH","AVGARCH"),requires = quote(model == 'fGARCH') ),
  makeIntegerVectorParam(id = "garchOrder", len = 2L,
                         lower = 1, upper = 8),
  makeIntegerVectorParam(id = "armaOrder", len = 2L,
                         lower = 1, upper = 9),
  makeLogicalParam(id = "include.mean"),
  makeLogicalParam(id = "archm"),
  makeDiscreteParam(id = "distribution.model",
                    values = c("norm","std","jsu", "sged")),
  makeDiscreteParam(id = "stationarity", c(0,1)),
  makeDiscreteParam(id = "fixed.se", c(0,1))
)
```

Making a Resample Scheme
========================================

```{r resampleScheme, cache = TRUE}
resampDesc = makeResampleDesc("GrowingCV", horizon = 35L,
                              initial.window = .9,
                              size = nrow(getTaskData(aaplTask)),
                              skip = .01)
resampDesc
```

Example of Windowing Resample
======================================================
<center>
<img src="caret_window.png" alt="Drawing" style="width: 1200px; height: 600px"/>
</center>

Making a Tuning Control
===========================================

```{r ctrlmake, cache = TRUE}
ctrl <- makeTuneControlIrace(maxExperiments = 350)
```

Tuning Over Parameter Space
===========================================

```{r tuneSpace, eval = FALSE}
garch.mod = makeLearner("fcregr.garch", n.ahead = 35, solver = 'hybrid')
library("parallelMap")
parallelStart("multicore",3)
configureMlr(on.learner.error = "warn")
set.seed(1234)
garch.res = tuneParams(garch.mod, task = aaplTask,
                 resampling = resampDesc, par.set = par_set,
                 control = ctrl,
                 measures = mase)
parallelStop()
garch.res
```

```{r garchTuneReal, eval = TRUE, echo = FALSE}

load("./garch_tune_mod.RData")
garch.res
```

Tuning Over Parameter Space: Final Model
===========================================

```{r garchTrain, eval = TRUE, cache = TRUE}
library(mlr)
garch.final = setHyperPars(makeLearner("fcregr.garch", n.ahead = 35, solver = 'nloptr',
                                       solver.control = list(maxeval = 200000, solver = 10),
                                       predict.type = "quantile"),par.vals = garch.res$x)

garch.train = train(garch.final, aaplTask)
garch.pred = predict(garch.train, newdata = aaplXtsTest)
performance(garch.pred, measures = mase, task = aaplTask)
```

Tuning Over Parameter Space: Plot Forecast
===========================================

```{r garchPred, eval = TRUE, echo = FALSE, fig.align= "center"}
library(xts)
plot(as.zoo(garch.pred$data), screens = 1, xlab = "Time", ylab = "Price", main = "Forecast Vs. Real",
     col = 1:3)
legend(x = "topleft", legend = colnames(garch.pred$data),lty = 1, bty = "n",
       col = 1:3, text.width = 8,  cex=1.2, pt.cex = 1)

```


```{r garchPredPlot, eval = FALSE, echo = FALSE}
save(garch.res, file ="./garch_tune_mod.RData")
```


Using an ML Model
=========================================

```{r mlLagTask, cache = TRUE, eval = TRUE}
aaplRegTask <- makeRegrTask(
  id = "Forecast aapl Closing Price",
  data = as.data.frame(aaplXtsTrain,rownames = index(aaplXtsTrain)),
  target  = "Close")

aaplLagTask = createLagDiffFeatures(aaplRegTask, lag = 1L:600L, difference = 0L, na.pad = FALSE)
```

Using an ML Model
=========================================

```{r mlLagTaskResample, cache = TRUE, eval = TRUE}
resampDesc = makeResampleDesc("GrowingCV", horizon = 35L,
                              initial.window = .9,
                              size = nrow(getTaskData(aaplLagTask)),
                              skip = .01)
resampDesc

```

Using an ML Model
=========================================


```{r xgboostParams, cache = TRUE, eval = FALSE, echo = TRUE}
## Trying Support Vector Machines
xg_learner <- makeLearner("regr.xgboost", booster = "gbtree", nthread = 4)
getLearnerParamSet("regr.xgboost")
xg_param_set <- makeParamSet(
  makeNumericParam(id = "eta", lower = 0.1, upper = 1),
  makeNumericParam(id = "gamma", lower = 0, upper = 100),
  makeNumericParam(id = "lambda", lower = 0, upper = 100),
  makeNumericParam(id = "lambda_bias", lower = 0, upper = 100),
  makeNumericParam(id = "alpha", lower = 0, upper = 100),
    makeNumericParam(id = "base_score", lower = 80, upper = 120),
  makeNumericParam(id = "colsample_bytree", lower = 0.01, upper = 1),
  makeNumericParam(id = "colsample_bylevel", lower = 0.01, upper = 1),
    makeNumericParam(id = "subsample", lower = 0.01, upper = 1),
  makeIntegerParam(id = "max_depth",  lower = 5, upper = 1000),
  makeIntegerParam(id = "nrounds", lower = 5, upper = 1000),
  makeIntegerParam(id = "num_parallel_tree", lower = 1, upper = 10)
)
```

Using an ML Model
=========================================

```{r xgboostTasktune, cache = TRUE, eval = FALSE, echo = TRUE}
ctrl <- makeTuneControlIrace(maxExperiments = 400)

library("parallelMap")
parallelStart("socket",2, level = "mlr.resample")
configureMlr(on.learner.error = "warn")
tune_mod <- tuneParams(learner = xg_learner, task = aaplLagTask,
                       measures = mase, resampling = resampDesc,
                       par.set = xg_param_set, control = ctrl )
parallelStop()
tune_mod
```

```{r xgboostTaskTuneReal, cache = TRUE, eval = TRUE, echo = FALSE}
load("./gbm_tune_mod.RData")
tune_mod

```

Using an ML Model
=========================================


```{r xgboostTasktrain, cache = TRUE, eval = FALSE, echo = TRUE}
xg_learner <- makeLearner("regr.xgboost", booster = "gbtree", nthread = 7)
gbm_final = setHyperPars(xg_learner, par.vals = tune_mod$x)
gbm_train <- train(gbm_final, aaplLagTask)
```


```{r xgboostTaskTrainReal, cache = TRUE, eval = TRUE, echo = FALSE}
load("./gbm_train_mod.RData")
```


Using an ML Model
=========================================

```{r xgboostTaskfc, cache = TRUE, eval = TRUE, echo = TRUE}
gbm_fore = forecast(gbm_train, h = 35, newdata = aaplXtsTest)
performance(gbm_fore, mase, task = aaplLagTask)
```


Using an ML Model
=========================================


```{r xgboostTaskfcPlot, cache = TRUE, eval = TRUE, echo = FALSE, fig.show= TRUE, fig.align="center"}
gbm_fore_dat = xts(gbm_fore$data, order.by = index(aaplXtsTest))
plot(as.zoo(gbm_fore_dat), screens = 1, xlab = "Time", ylab = "Price", main = "Forecast Vs. Real",
     col = 1:2)
legend(x = "topleft", legend = colnames(gbm_fore_dat),lty = 1, bty = "n",
       col = 1:2, text.width = 8,  cex=1.5, pt.cex = 1)
```

```{r xgboostTasktrainReal, cache = TRUE, eval = FALSE, echo = FALSE}
save(tune_mod, file = "./gbm_tune_mod.RData")
save(gbm_train, file = "./gbm_train_mod.RData")
```

